""" 
<Author>
  Justin Cappos

<Start Date>
  March 14th, 2013

<Description>
  A basic library that demonstrates PolyHash when applied to passwords (see 
  https://polypasshash.poly.edu/ for details).   

<Usage>
  import polypasshash

  # require knowledge of 10 shares to decode others.   Create a blank, new
  # password file...
  pph = polypasshash.PolyPassHash(threshold = 10, passwordfile = None)

  # create three admins so that any two have the appropriate threshold
  pph.create_account('admin','correct horse',5)
  pph.create_account('root','battery staple',5)
  pph.create_account('superuser','purple monkey dishwasher',5)

  # make some normal user accounts...
  pph.create_account('alice','kitten',1)
  pph.create_account('bob','puppy',1)
  pph.create_account('charlie','velociraptor',1)

  # try some logins and make sure we see what we expect...
  assert(pph.is_valid_login('alice','kitten') == True)
  assert(pph.is_valid_login('admin','correct horse') == True)
  assert(pph.is_valid_login('alice','nyancat!') == False)

  # persist the password file to disk
  pph.write_password_data('securepasswords')
 
  # If I remove this from memory, I can't use the data on disk to check 
  # passwords without a threshold
  pph = None

  # let's load it back in
  pph = polypasshash.PolyPassHash(threshold = 10,passwordfile = 'securepasswords')

  # The password information is essentially useless alone.   You cannot know
  # if a password is valid without threshold or more other passwords!!!
  try: 
    pph.is_valid_login('alice','kitten')
  except ValueError:
    pass
  else:
    print "Can't get here!   It's still locked!!!"

  # with a threshold (or more) of correct passwords, it decodes and is usable.
  pph.unlock_password_data([('admin','correct horse'), ('root','battery staple'), ('bob','puppy')])

  # now, I can do the usual operations with it...
  assert(pph.is_valid_login('alice','kitten') == True)

  pph.create_account('dennis','tadpole',1)
  ...


"""

__author__ = 'Justin Cappos (jcappos@poly.edu)'
__version__ = '0.1'
__license__ = 'MIT'
__all__ = ['PolyPassHash']


from hashlib import sha256

import fastshamirsecret as shamirsecret
#import shamirsecret

import os

import pickle


# This is a PolyHash object that has special routines for passwords...
class PolyPassHash(object):

  # this is keyed by user name.  Each value is a list of dicts (really a 
  # struct) where each dict contains the salt, sharenumber, and
  # passhash (saltedhash XOR shamirsecretshare).   
  accountdict = None

  # This contains the shamirsecret object for this data store
  shamirsecretobj = None
  
  # Is the secret value known?   In other words, is it safe to use the 
  # passwordfile
  knownsecret = False

  # length of the salt in bytes
  saltsize = 16


  # number of used shares.   While I could duplicate shares for normal users,
  # I don't do so in this implementation.   This duplication would allow
  # co-analysis of password hashes
  nextavailableshare = None

  def __init__(self, threshold, passwordfile = None):
    """Initialize a new (empty) object with the threshold.   I could store
       the threshold in the file, but don't do this currently.   I just assume
       it's known to the program"""

    self.threshold = threshold

    self.accountdict = {}

    # creating a new password file
    if passwordfile is None:
      # generate a completely random secret.   Since I'll be XORing by the 
      # output of SHA256, I want it to be 256 bits (or 32 bytes) long
      self.shamirsecretobj = shamirsecret.ShamirSecret(threshold, os.urandom(32))
      # I've generated it now, so it is safe to use!
      self.knownsecret = True
      self.nextavailableshare = 1
      return

    # Okay, they have asked me to load in a password file!
    self.shamirsecretobj = shamirsecret.ShamirSecret(threshold)
    self.knownsecret = False

    # A real implementation would need much better error handling
    passwordfiledata = open(passwordfile).read()
    
    # just want to deserialize this data.  Should do better validation
    self.accountdict = pickle.loads(passwordfiledata)

    assert(type(self.accountdict) is dict)

    # compute which share number is the largest used...
    for username in self.accountdict:
      # look at each share
      for share in self.accountdict[username]:
        self.nextavailableshare = max(self.nextavailableshare, share['sharenumber'])

    # ...then use the one after when I need a new one.
    self.nextavailableshare += 1






  def create_account(self, username, password, shares):
    """Create a new account.  Raises a ValueError if given bad data or if the
       system isn't initialized"""

    if not self.knownsecret:
      raise ValueError("Password File is not unlocked!")

    if username in self.accountdict:
      raise ValueError("Username exists already!")
      
    # Were I to add support for changing passwords, etc. this code would be
    # moved to an internal helper.

    if shares>255 or shares<=0:
      raise ValueError("Invalid number of shares: "+str(shares)+".")

    # Note this is just an implementation limitation.   I could do all sorts
    # of things to get around this (like just use a bigger field).
    if shares + self.nextavailableshare > 255:
      raise ValueError("Would exceed maximum number of shares: "+str(shares)+".")

    # for each share, we will add the appropriate dictionary.
    self.accountdict[username] = []
    
    for sharenumber in range(self.nextavailableshare, self.nextavailableshare+shares):
      thisentry = {}
      thisentry['sharenumber'] = sharenumber
      # take the bytearray part of this 
      shamirsecretdata = self.shamirsecretobj.compute_share(sharenumber)[1]
      thisentry['salt'] = os.urandom(self.saltsize)
      saltedpasswordhash = sha256(thisentry['salt']+password).digest()
      # XOR the two and keep this.   This effectively hides the hash unless 
      # threshold hashes can be simultaneously decoded
      thisentry['passhash'] = _do_bytearray_XOR(saltedpasswordhash, shamirsecretdata)
      

      self.accountdict[username].append(thisentry)
    
    # increment the share counter.
    self.nextavailableshare += shares
 



  def is_valid_login(self,username,password):
    """ Check to see if a login is valid."""

    if not self.knownsecret:
      raise ValueError("Password File is not unlocked!")


    if username not in self.accountdict:
      raise ValueError("Unknown user '"+username+"'")

    # I'll check every share.   I probably could just check the first in almost
    # every case, but this shouldn't be a problem since only admins have 
    # multiple shares.   Since these accounts are the most valuable (for what
    # they can access in the overall system), let's be thorough.

    for entry in self.accountdict[username]:

      saltedpasswordhash = sha256(entry['salt']+password).digest()
      # XOR to remove the salted hash from the password
      sharedata = _do_bytearray_XOR(saltedpasswordhash, entry['passhash'])
                  
      # now we should have a shamir share (if all is well.)
      share = (entry['sharenumber'],sharedata)

      # return T/F depending on if this share is valid.
      return self.shamirsecretobj.is_valid_share(share)
      


  def write_password_data(self, passwordfile):
    """ Persist the password data to disk."""
    if self.threshold >= self.nextavailableshare:
      raise ValueError("Would write undecodable password file.   Must have more shares before writing.")

    # Need more error checking in a real implementation
    open(passwordfile,'w').write(pickle.dumps(self.accountdict))
      

  def unlock_password_data(self, logindata): 
    """Pass this a list of username, password tuples like: [('admin',
       'correct horse'), ('root','battery staple'), ('bob','puppy')]) and
       it will use this to access the password file if possible."""



    if self.knownsecret:
      raise ValueError("Password File is already unlocked!")


    # Okay, I need to find the shares first and then see if I can recover the
    # secret using this.

    sharelist = []

    for (username, password) in logindata:
      if username not in self.accountdict:
        raise ValueError("Unknown user '"+username+"'")
  
      for entry in self.accountdict[username]:

        thissaltedpasswordhash = sha256(entry['salt']+password).digest()
        thisshare = (entry['sharenumber'], _do_bytearray_XOR(thissaltedpasswordhash, entry['passhash']))


        sharelist.append(thisshare)

    # This will raise a ValueError if a share is incorrect or there are other
    # issues (like not enough shares).
    self.shamirsecretobj.recover_secretdata(sharelist)
    # it worked!
    self.knownsecret = True
    


#### Private helper...
def _do_bytearray_XOR(a,b):
  a = bytearray(a)
  b = bytearray(b)

  # should always be true in our case...
  if len(a) != len(b):
    print len(a), len(b), a, b
  assert(len(a) == len(b))
  result = bytearray()

  for pos in range(len(a)):
    result.append(a[pos]^b[pos])
    
  return result

